package com.daletupling.movies;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import libs.MovieContentProvider;
import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.app.Fragment;
import android.content.Context;
import android.content.DialogInterface;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.LinearLayout;

@SuppressLint("NewApi")
public class MainFragment extends Fragment {

	
	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		super.onCreateView(inflater, container, savedInstanceState);

		LinearLayout view = (LinearLayout) inflater.inflate(
				R.layout.activity_main, container, false);

		// Search Button
		Button search_button = (Button) getActivity().findViewById(R.id.search_button);
		search_button.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {

				String tempString = search.getText().toString();
				// Check for empty search string display error dialog if it is
				// empty.

				if (!tempString.equals("")) {
					search_string = tempString.replaceAll(" ", "%20");
					// Pass search string to movieSearch method
					movieSearch(search_string);
					// close keyboard when Search is clicked
					InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
					imm.hideSoftInputFromWindow(((View) v).getWindowToken(), 0);

					search.setText("");
					search.setHint(R.string.filter_hint);
				} else {
					AlertDialog.Builder builder = new AlertDialog.Builder(
							mContext);
					builder.setMessage(
							"You did not enter a valid search keyword. Please enter a movie title or keyword that may be in the movie you are looking for.")
							.setCancelable(false)
							.setPositiveButton("OK",
									new DialogInterface.OnClickListener() {
										public void onClick(
												DialogInterface dialog, int id) {
											dialog.cancel();
										}
									});
					AlertDialog alert = builder.create();
					alert.show();
				}// if statement closing bracket

			}// onClick closing bracket

		});// SEARCH BUTTON onClickListener closing bracket

		// Filter button
		Button filter_button = (Button) getActivity().findViewById(R.id.filter_button);
		// disable filter button
		filter_button.setVisibility(View.GONE);
		filter_button.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				String filter_Valid = search.getText().toString();

				Pattern stringPattern = Pattern.compile("^[0-9]{1,4}$");
				Matcher matchString = stringPattern.matcher(filter_Valid);
				// Check for empty keyword, if empty display dialog otherwise
				// continue to check if keyword is valid
				if (filter_Valid.equals("")) {
					AlertDialog.Builder builder = new AlertDialog.Builder(
							mContext);
					builder.setMessage(
							"Filter keyword is empty. Please enter a keyword and try again.")
							.setCancelable(false)
							.setPositiveButton("OK",
									new DialogInterface.OnClickListener() {
										public void onClick(
												DialogInterface dialog, int id) {
											dialog.cancel();
										}
									});
					AlertDialog alert = builder.create();
					alert.show();

					// check whether keyword meets criteria set via regex.

				} else if (!matchString.matches()) {
					// Display dialog box for invalid filter string only allows
					// ^[0-9]{1,4}$
					// number 0-9 and only 4 character, all characters must be
					// numbers
					AlertDialog.Builder builder = new AlertDialog.Builder(
							mContext);
					builder.setMessage(
							"Filter keyword may only contain numbers 0-9 and only 4 characters. Please try entering a valid keyword.")
							.setCancelable(false)
							.setPositiveButton("OK",
									new DialogInterface.OnClickListener() {
										public void onClick(
												DialogInterface dialog, int id) {
											dialog.cancel();
										}
									});
					AlertDialog alert = builder.create();
					alert.show();

				} else {
					Uri yearUri = Uri
							.parse(MovieContentProvider.MovieData.CONTENT_URI
									.toString()
									+ "/year/"
									+ search.getText().toString());
					Log.i("YEAR URI", yearUri.toString());
					displayMovies(yearUri);
					refresh_button.setVisibility(View.VISIBLE);
					filter_button.setVisibility(View.GONE);
				}
			}
		});// FILTER BUTTON on clickListener closing bracket

		// Refresh Button
		Button refresh_button = (Button) getActivity().findViewById(R.id.refresh_previous);
		refresh_button.setVisibility(View.GONE);
		refresh_button.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				Uri previousSearch = Uri
						.parse(MovieContentProvider.MovieData.CONTENT_URI
								.toString());
				displayMovies(previousSearch);
				refresh_button.setVisibility(View.GONE);
				filter_button.setVisibility(View.VISIBLE);
				search.setText("");
				search.setHint(R.string.filter_hint);
			}
		});// refresh button closing bracket
		return view;
	};
}
