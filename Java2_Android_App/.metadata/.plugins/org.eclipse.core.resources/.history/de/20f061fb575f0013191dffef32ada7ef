package libs;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;

import android.content.Context;

import android.util.Log;

public class Storage {

	private static Storage m_instance;
	
	private Storage(){
		
	}
	
	public static Storage getInstance(){
		if(m_instance == null){
			m_instance = new Storage();
		}
		return m_instance;
	}
	
	public static Boolean writeFile(Context context, String filename, Object content, Boolean external){
		try{
			File file;
			FileOutputStream fos;
			ObjectOutputStream oos;
			if(external){
				file = new File(context.getExternalFilesDir(null), filename);
				fos = new FileOutputStream(file);
			} else {
				fos = context.openFileOutput(filename, Context.MODE_PRIVATE);
			}
			oos = new ObjectOutputStream(fos);
			oos.writeObject(content);
			oos.close();
			fos.close();
		} catch (IOException e){
			Log.e("WRITE ERROR", filename);
		}		
		return true;
	}
	

	

	public String readFile(Context context, String filename){
		
		String fileData = "";

		FileInputStream fis = null;
		try {
			fis = context.openFileInput(MovieService.FILENAME);
			BufferedInputStream bis = new BufferedInputStream(fis);
			byte[] contentBytes = new byte[1024];
			int bytesRead = 0;
			StringBuffer contentBuffer = new StringBuffer();
			while ((bytesRead = bis.read(contentBytes)) != -1) {
				fileData = new String(contentBytes, 0, bytesRead);
				contentBuffer.append(fileData);
			}
			fileData = contentBuffer.toString();
			Log.i("FILE DATA STRING", fileData);
			Log.i("FILE LOADED", "FILE HAS LOADED");
		} catch (Exception e) {

		}finally{
			try{
				fis.close();
			}catch (IOException e){
				Log.e("CLOSING ERROR", e.toString());
			}
		}

		return fileData;
	}
}
